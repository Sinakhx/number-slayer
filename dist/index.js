var T=(r,t=",")=>{let o=`${r}`.split("."),n=o[0],u=o.length>1?`.${o[1]}`:"",c=/(\d+)(\d{3})/;for(;c.test(n);)n=n.replace(c,`$1${t}$2`);return n+u};var E=r=>r||0;var D=r=>{let t=r[0]==="-"?-1:1,e=t<0?r.slice(1):r;return e=e.slice(0,2)==="0b"?e.slice(2):e,parseInt(e,2)*t},I=r=>(r<0?"-":"")+"0b"+(Math.abs(r)>>>0).toString(2);var b=r=>!Number.isInteger(r)&&!Number.isNaN(r)&&Number.isFinite(r);var P=r=>b(r)?`${r}`.split(".")[1].length:0;var f=r=>Math.max(Math.floor(Math.log10(Math.abs(r))),0)+1;var j=r=>r===0||r==="0"?1:+!!r;var p=(...r)=>{let t=(o,n)=>n===0?o:t(n,o%n),e=r.filter(Boolean).reduce((o,n)=>t(o,n),r[0])||0;return e?Math.abs(e):1/0};var w=r=>r>Number.MAX_SAFE_INTEGER||r<Number.MIN_SAFE_INTEGER;var l=r=>{if(r instanceof Date)return!1;let t=r&&typeof r.valueOf=="function"?r.valueOf():r;return typeof t=="number"&&Number.isFinite(t)};var z=(...r)=>{let t=(e,o)=>e*o/p(e,o);return Math.abs(r.reduce((e,o)=>t(e,o))||0)};var X=(r,t)=>(r%t+t)%t;var M=()=>{let r=n=>Object.fromEntries(Array(10).fill(0).map((u,c)=>{let a=c+"",i=String.fromCharCode(a.charCodeAt(0)+1728);return n===0?[a,i]:[i,a]})),t=r(1),e=r(0),o=n=>u=>`${u}`.split("").map(c=>n[c]||c).join("");return{enToFaNumber:o(e),faToEnNumber:o(t)}},{enToFaNumber:g,faToEnNumber:H}=M(),J=r=>{let t="\u066A ",e=r>=0?g(r):g(Math.abs(+r))+"-";return e==="-\u06F0"?t+"\u06F0":t+e};var N=(r,t)=>t<r?N(t,r):Math.floor(Math.random()*(t-r+1))+r;var Q=(r,t,e=1)=>Array.from({length:Math.ceil((t-r)/e)},(o,n)=>r+n*e);var F=()=>Math.floor(Math.random()*6)+1,V=(r=1)=>Array(r).fill(0).map(()=>F());var rr=(r,t=1,e="round")=>{let o=f(r);return Math[e](r/10**(o-t))*10**(o-t)};var or=(r,t)=>{if(!t&&t!==0)return r;let e=+r;if(!l(e))return r;let o=Math.floor(e);if(t===0)return o;let n=e-o,u=10**t;return Math.round((o+n)*u)/u};var sr=(r,t=2,e,o)=>{let n=+r,u=`${r}`,c=u[0]==="-"||u[0]==="+"?u[0]:"";n>0&&(o===!0&&(c="+"),o===!1&&(c=""));let[a,i]=`${Math.abs(n)}`.split("."),x=c+a.padStart(t,"0"),h=e?`.${"0".repeat(e)}`:"",d=i?`.${i.padEnd(e||i.length,"0")}`:h;return x+d};export{T as addCommasToNumber,E as avoidMinusZero,I as bin,P as countFloatDigits,f as countIntDigits,j as countWithZeros,g as enToFaNumber,H as faToEnNumber,p as gcd,D as int,w as isBigNumber,l as isNumber,z as lcm,X as modulus,N as randomInt,Q as range,F as rollDice,V as rollMultipleDices,rr as roundThousands,J as toFaPercent,or as toPrecision,sr as zeroPad};
